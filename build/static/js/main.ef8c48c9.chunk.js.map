{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","Header","react_default","a","createElement","style","react_router_dom","to","TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","borderBottom","textDecoration","props","todo","completed","markComplete","e","console","log","inherits","createClass","key","value","_this$props$todo","id","title","type","onChange","bind","onClick","delTodo","btnStyle","Component","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","AddTodo","state","setState","defineProperty","target","name","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","felx","About","Fragment","App","axios","delete","then","res","toConsumableArray","filter","AddTodos","post","data","_this2","get","_this3","layout_Header","react_router","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAaA,IAAMA,EAAc,CAChBC,WAAY,OACZC,MAAO,OACPC,UAAW,SACXC,QAAS,QAGPC,EAAY,CACdH,MAAO,QAGII,EArBf,WAEI,OACIC,EAAAC,EAAAC,cAAA,UAAQC,MAAOV,GACXO,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,MAAOL,EAAWO,GAAG,KAA3B,QAFJ,MAEiDL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,MAAOL,EAAWO,GAAG,UAA3B,WCL5CC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIQ,SAAW,WACP,MAAM,CACF9B,WAAY,UACZG,QAAS,OACT4B,aAAc,kBACdC,eAAgBjB,EAAKkB,MAAMC,KAAKC,UAAY,eAAiB,SANzEpB,EAUIqB,aAAe,SAACC,GACZC,QAAQC,IAAIxB,EAAKkB,QAXzBlB,EAAA,OAAAC,OAAAwB,EAAA,EAAAxB,CAAAJ,EAAAC,GAAAG,OAAAyB,EAAA,EAAAzB,CAAAJ,EAAA,EAAA8B,IAAA,SAAAC,MAAA,WAca,IAAAC,EACc1B,KAAKe,MAAMC,KAAvBW,EADFD,EACEC,GAAGC,EADLF,EACKE,MACV,OACIxC,EAAAC,EAAAC,cAAA,OAAKC,MAAQS,KAAKY,YACdxB,EAAAC,EAAAC,cAAA,SAEIF,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,WAAWC,SAAU9B,KAAKe,MAAMG,aAAaa,KAAK/B,KAAM2B,KAAO,GAC1EC,EACDxC,EAAAC,EAAAC,cAAA,UAAQ0C,QAAShC,KAAKe,MAAMkB,QAAQF,KAAK/B,KAAK2B,GAAKpC,MAAO2C,GAA1D,WAtBpBxC,EAAA,CAA8ByC,aAmCxBD,EAAW,CACbpD,WAAY,UACZC,MAAO,OACPE,QAAS,WACTmD,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGI5C,IC3BA6C,mLAfL,IAAA1C,EAAAG,KACN,OAAOA,KAAKe,MAAMyB,MAAMC,IAAI,SAACzB,GAAD,OAC1B5B,EAAAC,EAAAC,cAACoD,EAAD,CAAUlB,IAAMR,EAAKW,GAAIX,KAAOA,EAAOE,aAAerB,EAAKkB,MAAMG,aAAce,QAASpC,EAAKkB,MAAMkB,mBAHrFE,qBCqCLQ,EAtCf,SAAAhD,GAAA,SAAAgD,IAAA,IAAA/C,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,GAAA,QAAA1C,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA6C,IAAAlC,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEIwC,MAAQ,CACJhB,MAAM,IAHd/B,EAMIiC,SAAW,SAACX,GAAD,OAAOtB,EAAKgD,SAAL/C,OAAAgD,EAAA,EAAAhD,CAAA,GAAgBqB,EAAE4B,OAAOC,KAAO7B,EAAE4B,OAAOtB,SAN/D5B,EAQIoD,SAAW,SAAC9B,GACRA,EAAE+B,iBACFrD,EAAKkB,MAAMoC,QAAQtD,EAAK+C,MAAMhB,OAC9B/B,EAAKgD,SAAS,CAACjB,MAAM,MAX7B/B,EAAA,OAAAC,OAAAwB,EAAA,EAAAxB,CAAA6C,EAAAhD,GAAAG,OAAAyB,EAAA,EAAAzB,CAAA6C,EAAA,EAAAnB,IAAA,SAAAC,MAAA,WAeQ,OACIrC,EAAAC,EAAAC,cAAA,QAAM2D,SAAUjD,KAAKiD,SAAU1D,MAAO,CAAC6D,QAAS,SAC5ChE,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,OACZmB,KAAK,QACLzD,MAAO,CAAC8D,KAAK,KAAMpE,QAAS,OAC5BqE,YAAY,eACZ7B,MAAOzB,KAAK4C,MAAMhB,MAClBE,SAAU9B,KAAK8B,WAEf1C,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,SACZJ,MAAM,SACN8B,UAAU,MACVhE,MAAO,CAACiE,KAAM,YA3B9Bb,EAAA,CAA6BR,aCUdsB,MAXf,WACI,OAEIrE,EAAAC,EAAAC,cAACF,EAAAC,EAAMqE,SAAP,KACItE,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kJACAF,EAAAC,EAAAC,cAAA,sCCsEGqE,oNAlEbf,MAAQ,CAKNJ,MAAO,MAOTtB,aAAe,SAACS,GAEd9B,EAAKgD,SAAS,CAACL,MAAO3C,EAAK+C,MAAMJ,MAAMC,IAAI,SAAAzB,GAKzC,OAJGA,EAAKW,KAAOA,IAEbX,EAAKC,WAAaD,EAAKC,WAElBD,SAIXiB,QAAU,SAACN,GAGTiC,IAAMC,OAAN,8CAAAlD,OAA2DgB,IACxDmC,KAAK,SAAAC,GAAG,OAAIlE,EAAKgD,SAAS,CAACL,MAAM1C,OAAAkE,EAAA,EAAAlE,CAAID,EAAK+C,MAAMJ,MAAMyB,OAAO,SAAAjD,GAAI,OAAIA,EAAKW,KAAOA,YAGtFuC,SAAW,SAACtC,GAQVgC,IAAMO,KAAK,6CAA6C,CACtDvC,QACAX,WAAW,IAEV6C,KAAK,SAAAC,GAAG,OAAIlE,EAAKgD,SAAS,CAACL,MAAK,GAAA7B,OAAAb,OAAAkE,EAAA,EAAAlE,CAAMD,EAAK+C,MAAMJ,OAAjB,CAAwBuB,EAAIK,+FAlC7C,IAAAC,EAAArE,KAClB4D,IAAMU,IAAI,wDAAwDR,KAAK,SAAAC,GAAG,OAAIM,EAAKxB,SAAS,CAACL,MAAOuB,EAAIK,0CAoClG,IAAAG,EAAAvE,KAEN,OADAoB,QAAQC,IAAIrB,KAAK4C,MAAMJ,OAErBpD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKiE,UAAU,OACbnE,EAAAC,EAAAC,cAAA,OAAKiE,UAAU,aACbnE,EAAAC,EAAAC,cAACkF,EAAD,MACApF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA7D,GAAK,OACjC3B,EAAAC,EAAAC,cAACF,EAAAC,EAAMqE,SAAP,KACEtE,EAAAC,EAAAC,cAACuF,EAAD,CAAU1B,QAASoB,EAAKL,WACxB9E,EAAAC,EAAAC,cAACwF,EAAD,CAAOtC,MAAO+B,EAAK3B,MAAMJ,MAAOtB,aAAcqD,EAAKrD,aAAce,QAASsC,EAAKtC,cAGnF7C,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAOE,KAAK,SAASI,UAAatB,cA5D5BtB,cCEE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAST,OAAOxF,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.ef8c48c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link} from 'react-router-dom';\r\n\r\nfunction Header() {\r\n\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () =>{\r\n        return{\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    markComplete = (e) =>{\r\n        console.log(this.props)\r\n    }\r\n\r\n    render() {\r\n        const {id,title} = this.props.todo;\r\n        return (\r\n            <div style ={this.getStyle()}>\r\n                <p>\r\n                    {/*.props goes the upper level, Todos.js where we then have to pass it to App.js*/}\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/>{''}\r\n                    {title}\r\n                    <button onClick={this.props.delTodo.bind(this,id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    padding: '5px 10px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {  \r\n  render(){\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem key ={todo.id} todo ={todo}  markComplete= {this.props.markComplete} delTodo={this.props.delTodo}/> \r\n    ));\r\n    \r\n  }\r\n}\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title:''\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n                <input type=\"text\" \r\n                name=\"title\" \r\n                style={{flex:'10', padding: '5px'}}\r\n                placeholder=\"Add Todo ...\"\r\n                value={this.state.title}\r\n                onChange={this.onChange}\r\n                />\r\n                <input type=\"submit\"\r\n                value=\"Submit\"\r\n                className=\"btn\"\r\n                style={{felx: '1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        //you don't need a div but the stuff needs to be contained in a element\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is a TodoList application used to practice React.js. This application also makes use of jsonplaceholder, Axios, and React Router</p>\r\n            <p>v1.0.0</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React, {Component}from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodos from './components/AddTodo';\nimport About from './components/pages/About';\nimport axios from 'axios';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n      //these are the items in the todo list\n      //id is the unique id\n      //title is the title of the task\n      //complete is the value if the task was completed\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({todos: res.data}))\n  }\n\n  markComplete = (id) => {\n    //we want to set the object in the todos array that matches the id that was passed from TodoItem.js\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id){\n        //this will set the todo complete to the oppisite\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }) });\n  }\n  //delTodo\n  delTodo = (id) =>{\n    /*\n    this.setState({todos:[...this.state.todos.filter(todo => todo.id !== id)]});*/\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({todos:[...this.state.todos.filter(todo => todo.id !== id)]}));\n  }\n\n  AddTodos = (title) => {\n    /*const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n    we don't have to use this anymore because we can just use axios.post\n    */\n    axios.post('https://jsonplaceholder.typicode.com/todos',{\n      title,\n      completed: false\n    })\n      .then(res => this.setState({todos: [...this.state.todos, res.data]}));    \n  }\n\n  render(){\n    console.log(this.state.todos)\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodos addTodo={this.AddTodos} />\n                <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>              \n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component = {About}/>\n          </div>   \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}